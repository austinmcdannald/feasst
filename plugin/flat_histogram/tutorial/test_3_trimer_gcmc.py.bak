import sys
import unittest
import feasst
sys.path.insert(0, feasst.install_dir() + '/plugin/system/tutorial/')
import lj_system
sys.path.insert(0, feasst.install_dir() + '/plugin/monte_carlo/tutorial/')
import analyze
sys.path.insert(0, feasst.install_dir() + '/plugin/flat_histogram/tutorial/')
import fh
import lj_fh

class TestFlatHistogramTrimer(unittest.TestCase):
    def test(self):
        monte_carlo = feasst.MonteCarlo()
        monte_carlo.set(feasst.RandomMT19937(feasst.args({"seed": "123"})))
        monte_carlo.add(lj_system.configuration(forcefield="data.trimer", box_length=9))
        lj_wca = feasst.MakeModelLJCutShift()
        params = monte_carlo.system().configuration().model_params()
        lj_wca.set_wca(0, 1, params)
        lj_wca.precompute(params)
        potential = feasst.Potential()
        potential.set_model_params(params)
        potential.set_model(lj_wca)
        monte_carlo.add(potential)
        criteria = fh.criteria_flathist(macro_min=0, macro_max=80, tmmc=True)
        monte_carlo.set(criteria)
        monte_carlo.add(feasst.MakeTrialTranslate(feasst.args(
            {"weight": "0.75", "tunable_param": "2."})))
        feasst.add_trial_transfer(monte_carlo, feasst.args(
            {"weight": "0.125", "particle_type": "0"}))
        analyze.add(monte_carlo, steps_per=int(1e0), log='log.txt')
        monte_carlo.run_until_complete()

if __name__ == "__main__":
    unittest.main()
